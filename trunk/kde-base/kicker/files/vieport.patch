diff -urN kicker/taskbar/taskbar.cpp kicker/taskbar/taskbar.cpp
--- kicker/taskbar/taskbar.cpp	2007-01-15 12:31:25.000000000 +0100
+++ kicker/taskbar/taskbar.cpp	2008-04-22 14:22:56.000000000 +0200
@@ -60,6 +60,7 @@
       m_sortByDesktop(false),
       m_showIcon(false),
       m_showOnlyIconified(false),
+      m_useViewports(false),
       m_textShadowEngine(0),
       m_ignoreUpdates(false)
 {
@@ -85,6 +86,15 @@
     connect(&m_relayoutTimer, SIGNAL(timeout()),
             this, SLOT(reLayout()));
 
+    // viewports
+    QSize v = TaskManager::the()->numberOfViewports();
+    if(v.width() * v.height() > 1) {
+        m_useViewports = true;
+        TaskManager::the()->trackGeometry(); // XXX Are there easiest ways ?
+        connect(TaskManager::the(), SIGNAL(desktopViewportChanged(int, const QPoint&)),
+            this, SLOT(desktopViewportChanged(int, const QPoint&)));
+    }
+
     // connect manager
     connect(TaskManager::the(), SIGNAL(taskAdded(Task::Ptr)),
             this, SLOT(add(Task::Ptr)));
@@ -553,6 +563,11 @@
     emit containerCountChanged();
 }
 
+void TaskBar::desktopViewportChanged(int desktop, const QPoint& viewport)
+{
+    desktopChanged(desktop);
+}
+
 void TaskBar::windowChanged(Task::Ptr task)
 {
     if (m_showOnlyCurrentScreen &&
@@ -580,7 +595,8 @@
     // just skip it
     if (!container ||
         (!m_showAllWindows &&
-         !container->onCurrentDesktop() &&
+         !container->onCurrentDesktop() && 
+	 !(!m_useViewports || container->onCurrentViewport()) &&
          !container->isVisibleTo(this)))
     {
         return;
@@ -871,7 +887,9 @@
          it != containers.constEnd();
          ++it)
     {
-        if ((m_showAllWindows || (*it)->onCurrentDesktop()) &&
+        if ((m_showAllWindows ||
+                ((*it)->onCurrentDesktop() &&
+                (!m_useViewports || (*it)->onCurrentViewport()))) &&
             ((showScreen() == -1) || ((*it)->isOnScreen())))
         {
             i++;
@@ -889,7 +907,9 @@
          it != containers.constEnd();
          ++it)
     {
-        if ((m_showAllWindows || (*it)->onCurrentDesktop()) &&
+        if ((m_showAllWindows ||
+                ((*it)->onCurrentDesktop() &&
+                (!m_useViewports || (*it)->onCurrentViewport()))) &&
             ((showScreen() == -1) || ((*it)->isOnScreen())))
         {
             i += (*it)->filteredTaskCount();
@@ -992,7 +1012,9 @@
          ++it)
     {
         TaskContainer* c = *it;
-        if ((m_showAllWindows || c->onCurrentDesktop()) &&
+        if ((m_showAllWindows ||
+                (c->onCurrentDesktop() &&
+                (!m_useViewports || c->onCurrentViewport()))) &&
             (!m_showOnlyIconified || c->isIconified()) &&
             ((showScreen() == -1) || c->isOnScreen()))
         {
diff -urN kicker/taskbar/taskbar.h kicker/taskbar/taskbar.h
--- kicker/taskbar/taskbar.h	2006-10-01 19:31:51.000000000 +0200
+++ kicker/taskbar/taskbar.h	2008-04-22 14:25:51.000000000 +0200
@@ -60,6 +60,7 @@
     bool showIcon() const { return m_showIcon; }
     bool sortByDesktop() const { return m_sortByDesktop; }
     bool showAllWindows() const { return m_showAllWindows; }
+    bool useViewports() const { return m_useViewports; }
 
     void drawShadowText(QPainter &p, const QRect &tr, int tf, const QString &str, const QSize &size);
 
@@ -79,6 +80,7 @@
     void remove(Startup::Ptr startup, TaskContainer *container = 0);
 
     void desktopChanged( int );
+    void desktopViewportChanged( int, const QPoint& );
     void windowChanged(Task::Ptr);
     void windowChangedGeometry(Task::Ptr);
 
@@ -113,6 +115,7 @@
     bool			m_sortByDesktop;
     bool			m_showIcon;
     bool			m_showOnlyIconified;
+    bool			m_useViewports;
     ArrowType 			arrowType;
     TaskContainer::List		containers;
     TaskContainer::List		m_hiddenContainers;
diff -urN kicker/taskbar/taskcontainer.cpp kicker/taskbar/taskcontainer.cpp
--- kicker/taskbar/taskcontainer.cpp	2007-05-14 09:55:39.000000000 +0200
+++ kicker/taskbar/taskcontainer.cpp	2008-04-22 14:32:12.000000000 +0200
@@ -1391,6 +1391,17 @@
     return tasks.first()->desktop();
 }
 
+QRect TaskContainer::viewports()
+{
+    if ( tasks.isEmpty() )
+        return QRect(TaskManager::the()->currentViewport(), QSize(2,2));
+
+    if ( tasks.count() > 1 )
+        return QRect(QPoint(0,0), TaskManager::the()->numberOfViewports()); // XXX ??
+
+    return tasks.first()->viewports();
+}
+
 bool TaskContainer::onCurrentDesktop()
 {
     if (m_startup)
@@ -1411,6 +1422,26 @@
     return false;
 }
 
+bool TaskContainer::onCurrentViewport()
+{
+    if (m_startup)
+    {
+        return true;
+    }
+
+    Task::List::const_iterator itEnd = tasks.constEnd();
+    for (Task::List::const_iterator it = tasks.constBegin(); it != itEnd; ++it)
+    {
+        Task::Ptr t = *it;
+        if (t->isOnCurrentViewport())
+        {
+            return true;
+        }
+    }
+
+    return false;
+}
+
 bool TaskContainer::isOnScreen()
 {
     if (isEmpty())
@@ -1468,7 +1499,9 @@
     for (Task::List::const_iterator it = tasks.constBegin(); it != itEnd; ++it)
     {
         Task::Ptr t = *it;
-        if ((taskBar->showAllWindows() || t->isOnCurrentDesktop()) &&
+        if ((taskBar->showAllWindows() ||
+                (t->isOnCurrentDesktop() &&
+                (!taskBar->useViewports() || t->isOnCurrentViewport()))) &&
             (!TaskBarSettings::showOnlyIconified() || t->isIconified()))
         {
             m_filteredTasks.append(t);
diff -urN kicker/taskbar/taskcontainer.h kicker/taskbar/taskcontainer.h
--- kicker/taskbar/taskcontainer.h	2006-10-01 19:31:51.000000000 +0200
+++ kicker/taskbar/taskcontainer.h	2008-04-22 14:34:39.000000000 +0200
@@ -63,17 +63,20 @@
 
     bool isEmpty();
     bool onCurrentDesktop();
+    bool onCurrentViewport();
     bool isIconified();
     bool isOnScreen();
 
     QString id();
     int desktop();
+    QRect viewports();
     QString name();
 
     virtual QSizePolicy sizePolicy () const;
 
     void publishIconGeometry( QPoint );
     void desktopChanged( int );
+    void desktopViewportChanged( int, const QPoint& );
     void windowChanged(Task::Ptr);
     void settingsChanged();
     bool eventFilter( QObject *o, QEvent *e );
diff -urN kicker/taskmanager/taskmanager.cpp kicker-3.5.10.patched/kicker/taskmanager/taskmanager.cpp
--- kicker/taskmanager/taskmanager.cpp	2007-10-08 11:51:19.000000000 +0200
+++ kicker/taskmanager/taskmanager.cpp	2008-04-22 15:07:39.000000000 +0200
@@ -69,6 +69,8 @@
             this,        SLOT(activeWindowChanged(WId)));
     connect(m_winModule, SIGNAL(currentDesktopChanged(int)),
             this,        SLOT(currentDesktopChanged(int)));
+    connect(m_winModule, SIGNAL(currentDesktopViewportChanged(int, const QPoint&)),
+            this,        SLOT(currentDesktopViewportChanged(int, const QPoint&)));
     connect(m_winModule, SIGNAL(windowChanged(WId,unsigned int)),
             this,        SLOT(windowChanged(WId,unsigned int)));
 
@@ -479,6 +481,11 @@
     emit desktopChanged(desktop);
 }
 
+void TaskManager::currentDesktopViewportChanged(int desktop, const QPoint& viewport)
+{
+    emit desktopViewportChanged(desktop, viewport);
+}
+
 void TaskManager::gotNewStartup( const KStartupInfoId& id, const KStartupInfoData& data )
 {
     Startup::Ptr s = new Startup( id, data, this );
@@ -554,6 +561,16 @@
     return m_winModule->numberOfDesktops();
 }
 
+QSize TaskManager::numberOfViewports(int desktop) const
+{
+    return m_winModule->numberOfViewports(desktop);
+}
+
+QSize TaskManager::numberOfViewports() const
+{
+    return m_winModule->numberOfViewports(m_winModule->currentDesktop());
+}
+
 bool TaskManager::isOnTop(const Task* task)
 {
     if (!task)
@@ -787,6 +804,30 @@
     return _info.valid() && _info.isOnCurrentDesktop();
 }
 
+QRect Task::viewports() const
+{
+    if(!_info.valid()) return QRect();
+
+    int vw = QApplication::desktop()->width();
+    int vh = QApplication::desktop()->height();
+
+    QRect  r(_info.frameGeometry());
+    QPoint v(TaskManager::the()->currentViewport());
+
+    r.addCoords(5, 5, -5, -5);
+    r.moveBy(v.x() * vw, v.y() * vh);
+
+    QRect  rr(QPoint(r.x() / vw, r.y() / vh),
+              QPoint((r.x() + r.width()) / vw, (r.y() + r.height()) / vh));
+
+    return rr;
+}
+
+bool Task::isOnCurrentViewport() const
+{
+    return _info.valid() && viewports().contains(TaskManager::the()->currentViewport());
+}
+
 bool Task::isOnAllDesktops() const
 {
     return _info.valid() && _info.onAllDesktops();
@@ -1473,6 +1514,16 @@
     return m_winModule->currentDesktop();
 }
 
+QPoint TaskManager::currentViewport(int desktop) const
+{
+    return m_winModule->currentViewport(desktop);
+}
+
+QPoint TaskManager::currentViewport() const
+{
+    return m_winModule->currentViewport(m_winModule->currentDesktop());
+}
+
 TaskDrag::TaskDrag(const Task::List& tasks, QWidget* source, const char* name)
   : QStoredDrag("taskbar/task", source, name)
 {
diff -urN kicker/taskmanager/taskmanager.h kicker/taskmanager/taskmanager.h
--- kicker/taskmanager/taskmaager.h	2006-10-01 19:31:51.000000000 +0200
+++ kicker/taskmanager/taskmanager.h	2008-04-22 15:20:46.000000000 +0200
@@ -85,11 +85,13 @@
     Q_PROPERTY( bool shaded READ isShaded WRITE setShaded )
     Q_PROPERTY( bool active READ isActive )
     Q_PROPERTY( bool onCurrentDesktop READ isOnCurrentDesktop )
+    Q_PROPERTY( bool onCurrentViewport READ isOnCurrentViewport )
     Q_PROPERTY( bool onAllDesktops READ isOnAllDesktops )
     Q_PROPERTY( bool alwaysOnTop READ isAlwaysOnTop WRITE setAlwaysOnTop )
     Q_PROPERTY( bool modified READ isModified )
     Q_PROPERTY( bool demandsAttention READ demandsAttention )
     Q_PROPERTY( int desktop READ desktop )
+    Q_PROPERTY( QRect viewports READ viewports )
     Q_PROPERTY( double thumbnailSize READ thumbnailSize WRITE setThumbnailSize )
     Q_PROPERTY( bool hasThumbnail READ hasThumbnail )
     Q_PROPERTY( QPixmap thumbnail READ thumbnail )
@@ -206,6 +208,11 @@
     bool isOnCurrentDesktop() const;
 
     /**
+     * Returns true if the task's window is on the current virtual viewport.
+     */
+    bool isOnCurrentViewport() const;
+
+    /**
      * Returns true if the task's window is on all virtual desktops.
      */
     bool isOnAllDesktops() const;
@@ -241,6 +248,11 @@
     int desktop() const { return _info.desktop(); }
 
     /**
+     * Returns the viewports on which this task's window resides.
+     */
+    QRect viewports() const;
+
+    /**
      * Returns true if the task is not active but demands user's attention.
      */
     bool demandsAttention() const;
@@ -569,7 +581,9 @@
 {
     Q_OBJECT
     Q_PROPERTY( int currentDesktop READ currentDesktop )
+    Q_PROPERTY( QPoint currentViewport READ currentViewport )
     Q_PROPERTY( int numberOfDesktops READ numberOfDesktops )
+    Q_PROPERTY( QSize numberOfViewports READ numberOfViewports )
 
 public:
     static TaskManager* the();
@@ -606,11 +620,31 @@
     int numberOfDesktops() const;
 
     /**
+     * Returns the number of virtual viewports on current desktop.
+     */
+    QSize numberOfViewports() const;
+
+    /**
+     * Returns the number of virtual viewports on given desktop.
+     */
+    QSize numberOfViewports(int desktop) const;
+
+    /**
      * Returns the number of the current desktop.
      */
     int currentDesktop() const;
 
     /**
+     * Returns the current viewport on the current virtual desktop.
+     */
+    QPoint currentViewport() const;
+
+    /**
+     * Returns the current viewport on the given virtual desktop
+     */
+    QPoint currentViewport(int desktop) const;
+
+    /**
      * Returns true if the specified task is on top.
      */
     bool isOnTop(const Task*);
@@ -662,6 +696,11 @@
     void desktopChanged(int desktop);
 
     /**
+     * Emitted when the current viewport changes.
+     */
+    void desktopViewportChanged(int desktop, const QPoint& viewport);
+
+    /**
      * Emitted when a window changes desktop.
      */
     void windowChanged(Task::Ptr);
@@ -680,6 +719,8 @@
     //* @internal
     void currentDesktopChanged(int);
     //* @internal
+    void currentDesktopViewportChanged(int, const QPoint& viewport);
+    //* @internal
     void killStartup( const KStartupInfoId& );
     //* @internal
     void killStartup(Startup::Ptr);
